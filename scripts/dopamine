#!/bin/bash
#
# Scripted playback of keyboard and mouse input specific to my
# Xubuntu DE with i3 WM, "dopamine" by EllaTheCat on github.
#
# -  2020-04-15: My understanding of xdotool has been proven to be
#    inadequate. It's important to understand what is wrong and why.
#

#
# Bash script.
#
i3-make
cat $0 | while read line; do
    case ${line} in
        (:quit*)
        exit 0
        ;;
        # Zero, one or two Menu key presses followed by zero or one
        # short strings.
        (:m0*)
        string=${line/:m0 /}
        if [ "${string}" != "_" ]; then
            dash -c "xdotool  getactivewindow type --clearmodifiers ${string}"
            sleep 0.2
        fi
        ;;
        (:m1*)
        string=${line/:m1 /}
        dash -c "xdotool key --clearmodifiers Menu"
        sleep 0.2
        if [ "_${string}" != "_" ]; then
            dash -c "xdotool type --clearmodifiers ${string}"
        fi
         sleep 0.2
        ;;
        (:m2*)
        string=${line/:m2 /}
        dash -c "xdotool key --clearmodifiers Menu"
        sleep 0.2
        dash -c "xdotool key --clearmodifiers Menu"
        sleep 0.2
        if [ "_${string}" != "_" ]; then
            dash -c "xdotool getactivewindow type --clearmodifiers ${string}"
            sleep 0.2
        fi
        ;;

        # Menu followed by backslash or Tab prompts for a short string.
        (:cmd*)
        string=${line/:cmd /}
        dash -c "xdotool key --clearmodifiers Menu"
        sleep 0.2
        dash -c "xdotool key --clearmodifiers backslash"
        sleep 1
        if [ "${string}" = "timeout" ]; then
            dash -c "xdotool key --clearmodifiers Right"
            sleep 9.8
            dash -c "xdotool key --clearmodifiers Return"
        else
            dash -c "xdotool type --clearmodifiers ${string}"
            sleep 4.8
        fi
        sleep 0.2
        ;;

        (:mouse*)
        button=$(echo $line | awk '{print $2}')
        x=$(echo $line | awk '{print $3}')
        y=$(echo $line | awk '{print $4}')
        xdotool  getactivewindow mousemove --sync $x $y
        case ${button} in
            (1|2|3|4|5) xdotool getactivewindow click --clearmodifiers ${button} ;;
        esac
        sleep 0.2
        ;;
        # Use dmenu as a narrator.
        (:msg*)
        message=${line/:msg /}
        echo -e "=== README ===" "\n" \
             ${message} | fmt -w 160 | \
            dmenu -b -l 8 -fn "Sans 24" -sb Black -nb Black -sf Yellow -nf Yellow
        ;;

        (pause*)
        string=${line/:pause /}
        sleep $((string / 1000))
        ;;
    esac
done
exit 0

#
# Custom scripts
#
:msg "Yellow text on a black background indicates a message from the narrator of this demo. This text and the title above it are the welcome message. Video playback presents and dismisses messages automatically. Scripting mode playback pauses the demo after presenting each message, and the user must press the Escape key to continue playing the demo."
:pause 5555
:msg "i3 is configured to use modes instead of modifiers. The Menu key cycles through three modes: default, Primary, Secondary, and then back to default. The left Windows key behaves like Menu when used on its own. The space key returns to default mode from Primary and Secondary modes.Primary mode binds 'i' (for info) to the full screen display of all bindings, arranged by mode."
:m1 i
:pause 9999
:quit
:msg "In Primary or Secondary mode, the screen dims, the title bar of the currently focused window shows the mode name and the i3bar shows a red tab with the mode name. One of these would be sufficient, but some people disa ble the title bar, and some the workspace indicators. The next scene will create a workspace called 'kb' and a single terminal to show all the key bindings."
:cmd xx
:pause 9999
:m1 t
:pause 4999
:m1 ti
:quit






#yad 2112 600 7 "Menu | backslash presents a dmenu at the bottom of the screen that expects a two or three character command. The timeout is expected to expire after four seconds, at which time the command is dispatched. Users can type Return for faster dispatch. Hovering over Cancel dismisses. Hovering over Help presents a sideways scrolling dmenu showing two character commands".
#cmd timeout
#yad 2112 600 7 "Menu | backslash | g7 presents the workspace g7 with a Google Chrome instance inside. If workspace g7 is empty another Google Chrome instance is created inside it."
#cmd g7
#yad 2112 600 7 "Google Chrome is configured with an extension such that openng a new tab opens a new window containing the new tab. This will be done next, leaving two windows in the workspace. Observe the i3 vim-like marks, [two digits inside square brackets] placed at the right end of the title bar."
#mouse 1 2190 61
#quit

#
# Done.
#
