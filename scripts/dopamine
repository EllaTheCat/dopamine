#!/bin/bash
#
# Scripted playback of keyboard and mouse input specific to my
# Xubuntu DE with i3 WM, "dopamine" by EllaTheCat on github.
#
# -  2020-04-15: My understanding of xdotool has been proven to be
#    inadequate. It's important to understand what is wrong and why.
#

#
# Bash script.
#

# The monitor with X axis pixel coords 1920 through 3839, the right
# hand one of 2 monitors side-by-side.
i3-msg 'focus output HDMI1'
url="https://commons.wikimedia.org/wiki/File:London_360%C2%B0_Panorama_from_the_London_Eye.jpg"
text="Attribution:  Photo by Gregg M. Erickson, ${url}"
#
#
lineno=0
cat $0 | while read line; do
    lineno=$((lineno + 1))
    case ${line} in
        # The demo runs without branches or jumps.  To debug a code
        # fragment, move it as close to the start as makes programming
        # sense and append this command to it.
        (:quit)
        exit 0
        ;;

        # Presentation delay in seconds. Do not use this inside
        # commands to ensure timing constraints.
        (:pause*)
        seconds=${line/:pause /}
        sleep ${seconds}
        ;;

        # Set a mode and press a key or keys.
        (:m0*)
        string=${line/:m0 /}
        if [ "_${string}" != "_" ]; then
            dash -c "xdotool  type --clearmodifiers ${string}"
            sleep 0.2
        fi
        ;;
        (:m1*)
        string=${line/:m1 /}
        dash -c "xdotool key --clearmodifiers Menu"
        sleep 0.2
        if [ "_${string}" != "_" ]; then
            dash -c "xdotool type --clearmodifiers ${string}"
        fi
         sleep 0.2
        ;;
        (:m2*)
        string=${line/:m2 /}
        dash -c "xdotool key --clearmodifiers Menu"
        sleep 0.2
        dash -c "xdotool key --clearmodifiers Menu"
        sleep 0.2
        if [ "_${string}" != "_" ]; then
            dash -c "xdotool type --clearmodifiers ${string}"
            sleep 0.2
        fi
        ;;

        # Menu followed by backslash or Tab prompts for a short string.
        # This uses the i3-wrapper command interface via the prompt.
        (:cmd*)
        string=${line/:cmd /}
        dash -c "xdotool key --clearmodifiers Menu"
        sleep 0.2
        dash -c "xdotool key --clearmodifiers backslash"
        sleep 1
        if [ "${string}" = "timeout" ]; then
            dash -c "xdotool key --clearmodifiers Right"
            sleep 9.8
            dash -c "xdotool key --clearmodifiers Return"
        else
            dash -c "xdotool type --clearmodifiers ${string}"
            sleep 4.8
        fi
        sleep 0.2
        ;;

        # Type a URL into Chrome's address bar.
        (:link*)
        string=${line/:link /}
        dash -c "xdotool key --clearmodifiers ctrl+l"
        sleep 0.2
        dash -c "xdotool type --clearmodifiers ${string}"
        sleep 0.2
        dash -c "xdotool key --clearmodifiers Return"
        sleep 0.6
        ;;

        # Move the mouse, then , optionally, click a button.
        (:mouse*)
        button=$(echo $line | awk '{print $2}')
        x=$(echo $line | awk '{print $3}')
        y=$(echo $line | awk '{print $4}')
        xdotool  getactivewindow mousemove --sync $x $y
        sleep 0.2
        case ${button} in
            (1|2|3|4|5) xdotool getactivewindow click --clearmodifiers ${button}
            sleep 0.2
        esac
        ;;

        # A yellow-on-black message slides up to provide commentary.
        (:msg*)
        message=${line/:msg /}
        echo  "${message}" | fmt -w 208 | \
            dmenu -b -l 8 -fn "Sans 24" -sb Black -nb Black -sf Yellow -nf Yellow
        sleep 0.2
        ;;

        # The colon character that indicates a command is prone to
        # typos that my eyesight may not notice.
        (:punct:*)
        case "${line:0:1}" in
            (:) ;;
            (:punct:*)
            message="[Line ${lineno}] Syntax error"
            echo  "${message}" | fmt -w 160 | \
                dmenu -b -l 8  -p '>>>>>>>>' -fn "Sans 24" -sb Black -nb Black -sf Yellow -nf Yellow
            exit -1
        esac
        ;;
    esac
done
exit 0

#
# Custom script.
#

:msg "Github hosts a repository called 'dopamine' developed by 'EllaTheCat', my nickname on reddit. I have Parkinson's Disease. I like my desktop to look good, but my primary interest is in human interface ergonomics for users with Parkinson's Disease. The demo tries to show what I've done."
:pause 1
:msg "I currently have two 1920x1080 monitors side-by side. Making a video at 16:9 aspect ratio would require 50% of the total screen area to be letterbox."
:pause 1
:msg "Desktop Background: Attribution:  Photo by Gregg M. Erickson,https://commons.wikimedia.org/wiki/File:London_360%C2%B0_Panorama_from_the_London_Eye.jpg"
:pause 1
:msg "The default i3 config uses the Super_L key as a modifier. The xcape utility lets us use Super_L  on its own. I have mapped it to Menu. Here are three (major) modes: the built-in 'default' mode, and two custom modes: Primary and Secondary. The Menu key cycles through the three modes. In Primary or Secondary mode, the title bar of the currently focused window shows the mode name, and the screen dims."
:pause 1
:m1 i
:pause 2
:msg "This screen shows the key bindings for the three modes. The bindings have all been extracted programmatically."
:pause 1
:pause 5
:msg "The  current i3 config delegates certain commands to the i3-wrapper script.  For example a prompt appears when the Menu and Tab keys (or Menu and backslash keys) are pressed in succession.  The prompt expects a two character command.  A command EITHER launches a designated application in a fresh workspace named after the command, OR brings into focus the running application on its designated workspace. This has been extended to provide ten workspaces for Emacs, e[0-9], and ten for Google Chrome, g[0-9]."
:pause 1
:icmd "The next scene shows several things in action: (1) command prompt. [2] launching browsers on workspaces [3] adding browsers to workspaces [4] focusing an existing browser workspace [5] Adding a unique two digit i3 mark to windows [6] displaying the unique two digit mark on the titlebar of a window'."
:pause 1
:msg "Put two browsers on the leftmost monitor. The subject is XFCE/XUbuntu. Please be patient if you can't see the left output of i3. This should take about 7 seconds. Put two browsers on the rightmost monitor. The subject is i3wm."
:cmd g9
:pause 1
:link http://feeblenerd.blogspot.com/2015/11/pretty-i3-with-xfce.html
:pause 1
:cmd gc
:pause 1
:link https://xubuntu.org/release/20-04/
:pause 1
:cmd g3
:pause 1
:link https://i3wm.org/docs/userguide.html
:pause 1
:cmd gc
:pause 1
:link https://www.reddit.com/r/i3wm/
:pause
:msg "I often switch the left hand monitor to receive from a Set Top Box, Fire Stick or ChromeCast, instead of from i3. I might then want to access a workspace on the left by bringing it across to the right.  There is a menu and a keybinding per output such that selecting a window by title or mark brings the entire workspace across."
:m1 .
:pause 3
:msg "That's all."

#
# Done.
#
