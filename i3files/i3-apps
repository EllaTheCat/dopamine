#!/bin/bash
#
# A script to start|stop various programs.
#
# - Attention bash gurus!
# - Please tell me if using bash subshells here makes sense or not.
#

# My primary monitor, situated centrally.
cmon=HDMI1

#
# Start here.
#
verb=start
for argument in "${@}"
do
    echo "${argument}"
    case "${argument}" in
        # A verb argument affects all subsequent arguments up until
        # either the next verb argument or end-of-list.
        (start|stop)
        verb=${argument}
        ;;

        (filewatcher)
        if [ "_${verb}" = "_stop" ]; then
            # shellcheck disable=2046
            kill -HUP $(pgrep -f 'i3-wrapper -s')
        fi
        if [ "_${verb}" = "_start" ]; then
            path=$(dirname "$0")
            # Is the eval required?
            (eval "${path}/i3-wrapper --file-watcher") &
        fi
        ;;

        (focuswatcher)
        if [ "_${verb}" = "_stop" ]; then
            # shellcheck disable=2046
            kill -HUP $(pgrep -f 'focus-watcher')
        fi
        if [ "_${verb}" = "_start" ]; then
            path=$(dirname "$0")
            # Is the eval required?
            (eval "${path}/i3-wrapper --focus-watcher") &
        fi
        ;;

        (synergy)
        if [ "$(pgrep -c synergy)" -ne 0 ]; then
            pkill -f synergy
            sleep 3
        fi
        if [ "_${verb}" = "_start" ]; then
            if [ "$(pgrep -c synergy)" -eq 0 ]; then
                (synergy) &
            fi
        fi
        ;;

        (tvheadend)
        if [ "$(pgrep -c tvheadend)" -ne 0 ]; then
            pkill tvheadend
            sleep 3
        fi
        if  [ "_${verb}" = "_start" ]; then
            if [ "$(pgrep -c tvheadend)" -eq 0 ]; then
                # TV Headend behaves better without authentication.
                (xfce4-terminal -T 'tvheadend' -x tvheadend --noacl) &
            fi
        fi
        ;;

        (workspaces)
        # A subroutine to be called during i3 startup.
        # Rename any remaining empty workspaces.
        if  [ "_${verb}" = "_start" ]; then
            i3-msg "focus output \"${cmon}\", rename workspace to \"${cmon}\""
        fi
        ;;

        (wallpaper)
        # My current desktop wallpaper (subject to change) is cropped
        # from a photo taken by someone else. The attribution notice
        # is self-documenting.
        #
        if  [ "_${verb}" = "_start" ]; then
            i3-msg "focus output \"${cmon}\""
            (sleep 5 && xdotool key Return) &
            url="https://commons.wikimedia.org/wiki/File:London_360%C2%B0_Panorama_from_the_London_Eye.jpg"
            echo ${url} | xclip
            text="Attribution:  Photo by Gregg M. Erickson, ${url}"
            echo "${text}" | dmenu -b -fn 'pango:DejaVu Sans 11'
            (sleep 5 && xdotool key Return) &
            text="Mouse right click the i3 status bar to show these texts again. The URL is available on the clipboard."
            text="${text} Photo is cropped 5760x1080."
            echo "${text}" | dmenu -b -fn 'pango:DejaVu Sans 11'
        fi
        ;;

        (usbdisks)
        # Spin down USB HDDs.
        if  [ "_${verb}" = "_start" ] || [ "_${verb}" = "_stop" ]; then
            sudo umount /snapdisks/banana
            sudo umount /snapdisks/tabasco
            sleep 3
            sudo hd-idle -t sdd  # banana
            sudo hd-idle -t sdc  # tabasco
        fi
        ;;

        #
        # Shutdown only.
        #

        (emacs)
        if  [ "_${verb}" = "_stop" ]; then
            i3-msg '[title="^Emacs :"] focus'
            emacsclient.emacs24 -e "(save-buffers-kill-emacs)"
        fi
        ;;
        (firefox)
        if  [ "_${verb}" = "_stop" ]; then
            # Firefox treats 'kill'/'pkill' as a crash.
            id=$(xdotool search "Mozilla Firefox" | head -1)
            xdotool windowactivate --sync "${id}"
            xdotool key --clearmodifiers ctrl+q
        fi
        ;;
        (chrome)
        if  [ "_${verb}" = "_stop" ]; then
            i3-msg '[class="Google-chrome"] kill'
        fi
        ;;
        (thunderbird)
        if  [ "_${verb}" = "_stop" ]; then
            i3-msg '[title="Mozilla Thunderbird$"] kill'
        fi
        ;;
        (VirtualBox)
        if  [ "_${verb}" = "_stop" ]; then
            if [ "$(VBoxManage list runningvms | wc -l)" -ne 0 ]; then
                # Running VMs must be shutdown manually.
                # Abandon shutdown completely to allow enough time.
                exit 0
            else
                # Zero VMs running, safe to kill VirtualBox Manager.
                i3-msg '[title="VirtualBox Manager$"] kill'
            fi
        fi
        ;;

        (marks)
        # Stop anything with a mark. This is gentle but there is no
        # housekeeping and data could be lost.
        if [ "_${verb}" = "_stop" ]; then
            marks="$(i3-msg -t get_marks)"
            # shellcheck disable=2001
            for m in $(echo "${marks}" | sed 's/[],"\[]/ /g'); do
                i3-msg --quiet "[con_mark=\"${m}\"] kill"
                sleep 0.5
            done
        fi
        ;;

        (everything)
        # Safely start or stop everything listed in proper sequence.
        # To proceed press OK or wait for the short timeout to expire.
        # Ensure the dialog appears on the primary monitor.
        # The watchers must be started first, the rest are optional.
        if  [ "_${verb}" = "_start" ]; then
            i3-msg "focus output ${cmon}"
            xdotool mousemove --sync --clearmodifiers 2880 384; sleep 1
            yad --title="Starting in 10s ..." --mouse --timeout=10 --timeout-indicator=top
            if  [ "$?" -ne 1 ]; then
                eval "$0 start filewatcher focuswatcher"
                eval "$0 start tvheadend synergy"
                eval "$0 start workspaces wallpaper"
                eval "$0 stop usbdisks" # Yes, spin them down!
            fi
	    yad --title="Starting complete." --timeout=3 --timeout-indicator=top
        fi
        if  [ "_${verb}" = "_stop" ]; then
            i3-msg "focus output ${cmon}"
            xdotool mousemove --sync --clearmodifiers 2880 384; sleep 1
            yad --title="Stopping in 10s ..." --mouse --timeout=10 --timeout-indicator=top
            if  [ "$?" -ne 1 ]; then
                eval "$0 stop VirtualBox"
                eval "$0 stop emacs firefox chrome thunderbird"
                eval "$0 stop synergy tvheadend"
                eval "$0 stop focuswatcher filewatcher"
                eval "$0 stop marks" # Yes, catch-all.
                eval "$0 stop usbdisks"
            fi
            yad --title="Stopping complete." --timeout=3 --timeout-indicator=top
        fi
        ;;

    esac
done

#
# Done.
#
