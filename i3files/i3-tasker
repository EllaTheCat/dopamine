#!/bin/bash
#

export lmon=HDMI2
export cmon=HDMI1

#
# Enable or disable AutoVoice for Chrome (lAutoInput style).
# chrome://extensions/?id=mefllcpfdfhohmeadieejdjcdcbibeml
#
autovoice()
{
    case "$1" in
        (continuous)
        # Start at one second, be careful with a smaller value.
        delay=0.33
        # g9 is not mapped at present, but this would override it.
        i3-msg "workspace g9"
        sleep "${delay}"
        i3-msg "move workspace to output ${lmon}"
        sleep  "${delay}"
        # The left window of a side-by-side pair on the left monitor.
        i3-msg "exec xdotool mousemove 786 322 click 1"
        ;;
    esac
}

#
#  Shell commands.
#
shell ()
{
    case "$1" in
        # Reserved for tvheadend.
        (mpv|vlc)
        # Brute force to ensure that the 'mp' workspace appears,
        # that the video window opens inside it, that the window
        # has focus, and that the mark is set on its titlebar.
        i3-msg "focus output ${lmon}"
        i3-msg "workspace \"zz\""
        i3-msg "workspace \"${1:0:1}p\""  # => mp or vp
        i3-msg "exec ${*:1}"
        sleep 10  # Better late than never, unobtrusive.
        i3-msg "exec ${HOME}/local/bin/i3-wrapper  --unique-mark"
        ;;
        # Autovoice for Chrome on/off switch.
        (autovoice)
        autovoice "$2" "$3"
        ;;
        # Clipboard buffer. It doesn't have to be the current
        # buffer for AutoVoice to write into it. It can be given
        # another name but AutoVoice expects the default.
        (emacs)
        emacsclient.emacs24 -e  "(switch-to-buffer \"${2:-Clipboard}\")"
        ;;
        # Command to insert or delete a special firewall rule.
        (firewall)
        i3-msg "exec ${HOME}/Programs/scrypts/firewall $2"
        ;;
        # When the phone rings get the user's attention.
        (phonecall)
        i3-msg "exec ${HOME}/Programs/scripts/phonecall"
        ;;
    esac
}


clipboard ()
{
    # Process the 'all lower case' text sent from AutoVoice.
    # Quotes substituted in Tasker to avoid misbehaviour.
    # shellcheck disable=SC2002
    contents=$(echo "$*" | sed 's/DQUOTE/\"/g' | sed "s/SQUOTE/\'/g")
    # Make the string more "sentence--like".
    contents=$(mksentence "${contents}")
    # Insert into both clipboards and then paste into Emacs.
    echo "${contents}" | xclip -selection primary     # mouse button 2
    echo "${contents}" | xclip -selection clipboard   # emacs control y
    emacsclient.emacs24 -e "(with-current-buffer \"Clipboard\" (yank))"
}

mksentence ()
{
    s=$(mkeye "$1")
    s=$(mkfirst "$s")
    s=$(mklast "$s")
    echo "$s"
}

#
# Capitalise the 1st person singular pronoun 'I'.
#
mkeye ()
{
    # "I know I am i'm sure I am i'm h a p p y"
    # >I know I am i'm sure I am I'm h a p p y<

    s="${1/^i\ /I\ }"  # Capital 'I' at beginning.
    s="${s/i\ /I\ }"     # Capital 'I' then space
    s="${s/i\ /I\ }"
    s="${s/i\ /I\ }"
    s="${s/i\ /I\ }"
    s="${s/i\'/I\'}"     # Capital 'I' then apostrophe.
    s="${s/i\'/I\'}"
    echo "$s"
}

#
# Capitalise the 1st letter of the 1st word of a sentence.
#
mkfirst ()
{
    echo  "${1^}"  # bash 4.0
}

#
# Close sentence with '.' or '?' using a heuristic to decide.
#
mklast ()
{
    s="$*"
    case "$1" in
        (What*|When*|Which*|Who*|How*)
        echo "${s}?"
        ;;
        (*)
        echo "${s}."
        ;;
    esac
}

#
# Start here.
#

case "$1" in
    (:clipboard)
    clipboard "${@:2}"
    ;;
    (:shell)
    shell "${@:2}"
    ;;
esac

#
# Done.
#
