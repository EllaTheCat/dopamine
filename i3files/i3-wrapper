#!/bin/bash
#
# i3-wrapper
#
# - This script and its companion scripts (i3-{apps, keyboard, mouse,
# - display, status, mode} together with a Makefile provide functions
# - that support my way of working.
#
# - This script uses a dmenu to enter commands that are typically two
# - or three characters long. Commands are written to a magic file and
# - each write triggers evaluation of the file contents. The mechanism
# - supports remote writers seamlessly.
#

#
# The wrapper Interface is a frequently modified magic file in shared
# memory.
#
dir=/dev/shm/${USER}/i3
file=command

#
# Label the (L)eft (C)entre (R)ight (MON)itors.
# My three monitors were arranged thus: [HDMI2] [HDMI1] [VGA1].
# Use 'xrandr' with no arguments to list monitor names and geometry.
#
lmon=HDMI2
cmon=HDMI1
rmon=VGA1

#
# The timeout in seconds for the main dynamic menu. Upon expiry,
# whatever has been entered wil be treated as a command to be
# executed. Try to reduce the timeout duration such that user has no
# need to press Enter. Start at 5 seconds.
#
export commandtimeout=4

#
# Focus or launch a program.
#
# EITHER switch focus to the running program matching on $1=$2, OR
# launch $5 with arguments ${@:6} on workspace $3 and output $4.
#
focus ()
{
    case "$1" in
        # Attempt to match the running program and obtain its window id.
        (instance)
        W=$(xdotool search --classname "$2" | head -1) ;;
        (class)
        W=$(xdotool search --class "$2" | head -1) ;;
        (title)
        W=$(xdotool search --name "$2" | head -1) ;;
        (*)
        W='' ;;
    esac

    if [ -z "$W" ]; then
        if [ $# -ge 5 ]; then
            # Change to the specified workspace and launch from there.
            # Set $3 'none' to stay on current workspace.
            if [ "$3" == 'none' ]; then
                i3-msg "exec ${*:5};"
            else
                i3-msg "workspace $3; exec ${*:5};"
            fi
            case "$4" in
                (${lmon}|${cmon}|${rmon})
                # Change to the specified output when window appears.
                # Set $4 'none' to stay on current output.
                sleep 1
                i3-msg "move workspace to output $4"
                ;;
            esac
            sleep 1; i3um  # Assign a unique mark.
        fi
    else
        # Focus the program i.
        i3-msg "workspace $3"
    fi
}

#
# Scratchpad (drop down) terminal.
#
i3dd()
{
    # Only one key binding is required, the first keypress performs
    # initialisation and hides the terminal again.
    if [ "_$(xdotool search --classname "Scratchpad" | head -1)"  = "_" ]; then
        xfce4-terminal -T Scratchpad &
        sleep 1
        # Set the instance to identify the scratchpad.
        xdotool getwindowfocus set_window --classname "Scratchpad"
        i3-msg "[instance=\"Scratchpad\"] resize set 80 ppt 80 ppt"
        i3-msg "[instance=\"Scratchpad\"] move absolute position 2112 24"
        i3-msg "[instance=\"Scratchpad\"] move scratchpad"
    else
        i3-msg "focus output ${cmon}"
        i3-msg "[instance=\"Scratchpad\"] scratchpad show"
    fi
}

#
# Add a terminal (split h, side-by-side).
#
i3tt()
{
    i3-msg "split h"
    i3terminal
}

#
# Add a terminal (split v, stacked).
#
i3yy()
{
    i3-msg "split v"
    i3terminal
}

#
# AutoVoice.
#
i3av()
{
    if [ "$(i3-msg -t get_workspaces | jq 'map(.name)' | grep -c 'AutoVoice')" -eq 0 ]; then
        i3-msg "workspace AutoVoice"
        sleep 0.7
        i3-msg "exec emacsclient.emacs24 -c  -e '(switch-to-buffer \"AutoVoice\")'"
    else
        i3-msg "workspace AutoVoice"
    fi
}

#
# Assign a unique mark.
#
i3um()
{
    # Generate a random 2 digit mark.  Reject and retry if it matches
    # an assigned mark. The retry loop takes more time as the number
    # of marked containers approaches 100.
    while : ; do
        id=$((10#$(date +%N) % 100))
        id=$(printf "%02d" "${id}")
        count=$(for m in $(i3-msg -t get_marks | sed 's/,/\ /g');
                do echo "${m}"; done | grep -c "${id}")
        if [ "${count}" -eq 0 ]; then break; fi
    done
    sleep 1 # No need for caller to wait for the window.
    windowid=$(printf "0x%x" "$(xdotool getwindowfocus)")
    i3-msg "[id=\"${windowid}\"] mark --toggle \"${id}\""
    i3-msg "[con_mark=\"${id}\"] focus"
}

#
#  Focus the next mark in a circular list of single letter marks.
#
#  - There are two circular paths of length 3 and one of length 4
#    for a total of 10 marks: (A,B,C) (R,S,T) (W,X,Y,Z).
#
i3ctm()
{
    # Determine the single letter mark for the currently focused window.
    # Thanks to  u/jimbopouliot on r/i3wm (reddit) for 'jq' improvement.
    # https://www.reddit.com/r/i3wm/comments/bcck1t/how_to_alttab_for_groups_of_windows/
    mark=$(i3-msg -t get_tree | jq '.. | objects | select(.focused) | .marks[] | select(match("^[ABCRSTWXYZ]$"))')
    echo "->${mark}<-"

    # Conveniently, the letter is enclosed by double quotes.
    case "${mark}" in
        (\"A\") i3-msg "[ con_mark=\"B\" ] focus" ;;
        (\"B\") i3-msg "[ con_mark=\"C\" ] focus" ;;
        (\"C\") i3-msg "[ con_mark=\"A\" ] focus" ;;

        (\"R\") i3-msg "[ con_mark=\"S\" ] focus" ;;
        (\"S\") i3-msg "[ con_mark=\"T\" ] focus" ;;
        (\"T\") i3-msg "[ con_mark=\"R\" ] focus" ;;

        (\"W\") i3-msg "[ con_mark=\"X\" ] focus" ;;
        (\"X\") i3-msg "[ con_mark=\"Y\" ] focus" ;;
        (\"Y\") i3-msg "[ con_mark=\"Z\" ] focus" ;;
        (\"Z\") i3-msg "[ con_mark=\"W\" ] focus" ;;

        (*)
        # If the mark is absent the window id does not change.
        # If focus succeeds stop, else try again with the next mark.
        id=$(xdotool getwindowfocus)
        i3-msg "[ con_mark=\"A\" ] focus"
        windowid=$(xdotool getwindowfocus)
        if [ "${id}" = "${windowid}" ]; then
            id="${windowid}"
            i3-msg "[ con_mark=\"R\" ] focus"
            windowid=$(xdotool getwindowfocus)
            if [ "${id}" = "${windowid}" ]; then
                i3-msg "[ con_mark=\"X\" ] focus"
            fi
        fi
    esac
}

#
# Add a terminal and assign a mark (subroutine).
#
i3terminal ()
{
    xfce4-terminal -T "xfce4-terminal" &
    sleep 0.3 && i3um  # Assign a unique mark.
}

#
# Create a workspace with three side-by-side terminal sinside if none
# exists, othewise visit the workspace. The name of the workspace is
# the command alias. Inspired by:
# https://www.reddit.com/r/i3wm/comments/bjw151/i3_reading_window/
#
i3lowerlower()
{
    cws=$(i3-msg -t get_workspaces | jq '.[] | .name,.focused' | \
                 grep true -B1 | grep -v true)
    tws=$(i3-msg -t get_workspaces | jq '.[] | .name' | grep -c "$1")
    if [ "${cws}" != "\"$1\"" ]; then
        i3-msg "workspace $1"
        if [ "${tws}" -eq 0 ]; then
            i3terminal
            split v
            i3terminal
            split h
            i3terminal
            move left
        fi
    fi
}

#
# Subroutine for emacs frames and chrome windows.
#
# $1 (e[0-9] g[0-9] instance)
# $2 emacs24, chrome
# $3 emacs24 -rv, google-chrome
# $4 emacsclient.emacs24 -c, google-chrome --new-window
#
i3emgc ()
{
    cws=$(i3-msg -t get_workspaces | jq '.[] | .name,.focused' | grep true -B1 | grep -v true)
    arg="$1"
    # shellcheck disable=2086
    if [ "$(pgrep -c $2)" -eq 0 ]; then
        if  [ "${cws}" != "${arg}" ]; then
            # shellcheck disable=2086
            i3-msg "workspace ${arg}, exec sleep 1"
        fi
        i3-msg "exec  $3"
    else
        # shellcheck disable=2086
        count=$(i3-msg -t get_workspaces | jq 'map(.name)' | grep -c \"${arg}\")
        if [ "${count}" -eq 0 ]; then
            if  [ "${cws}" != "${arg}" ]; then
                i3-msg "workspace ${arg}, exec sleep 1"
            fi
            i3-msg "exec $4"
        else
            i3-msg "workspace ${arg}"
        fi
    fi
}

#
# Toggle the name of an Emacs workspace to toggle the mouse
# availability. Renaming to e[0-9] enables, m[0-9] disables.
#
# - The popup dialog is is a hack to trigger the focus watcher.
#
i3tem()
{
    cws="$(i3-msg -t get_workspaces | jq '.[] | .name,.focused' | \
                 grep true -B1 | grep -v true)"
    arg=${cws:1:2}
    echo "$arg"
    case "${arg}" in
        (e[0-9])
        i3-msg "rename workspace to ${arg/e/m}"
        yad --timeout 1 --title "Mouse will be disabled"
        ;;
        (m[0-9])
        i3-msg "rename workspace to ${arg/m/e}"
        yad --timeout 1 --title "Mouse will be enabled"
        ;;
    esac
}


#
# 1. Common programs with examples of how to integrate them.
# 2. Terminals, editor, browser, and management of their marks.
# 3. Support for spoken dictation of sentences.
# 0. TODO. Split this function?
#
i3programs ()
{
    case "$1" in
        # Emacs frames.
        # Use e[0-9] to enable the mouse, m[0-9] to disable it.
        # Use 'em' to add another frame alongside an existing one.
        ([em][0-9])
        i3emgc "$1" 'emacs24' 'emacs24 -rv' 'emacsclient.emacs24 -c' ;;
        (em)
        i3-msg "exec emacsclient.emacs24 -c" ;;

        # Chrome windows.
        # Use 'gc' to add another window alongside an existing one.
        (g[0-9])
        i3emgc "$1" 'chrome' 'google-chrome' 'google-chrome --new-window' ;;
        (gc)
        i3-msg "exec google-chrome --new-window" ;;

        # 1. Terminal in the current workspace. Split is top-bottom.
        # 2. Terminal in the current workspace. Split is left-right.
        # 3. Two half height terminals to the right of e.g. Emacs.
        # 4. Assign a unique mark. Fix missing marks.
        (tt)
        i3tt ;;
        (yy)
        i3yy ;;
        (ty)
        i3tt && i3yy ;;
        (um)
        i3um ;;

        (av)
        i3av ;;

        (ff)
        focus instance Navigator 'ff' ${cmon} firefox ;;
        (tb)
        focus class Thunderbird 'tb' ${lmon} thunderbird ;;

        # Does the user want this program to launch in a dedicated
        # workspace or in the current workspace?
        (th)
        focus title 'File Manager' 'th' ${rmon} \
              exo-open --launch FileManager "${HOME}/1/Downloads" ;;
        (tn)
        focus title 'File Manager' 'none' 'none' \
              exo-open --launch FileManager "${HOME}/1/Downloads" ;;

        (sk)
        focus instance skype 'sk' ${rmon} /snap/bin/skype ;;
        (ws)
        focus instance wireshark 'ws' ${cmon} wireshark ;;
        (sy)
        focus instance synaptic 'sy' ${lmon} synaptic-pkexec ;;

        (pp)
        focus title "LibreOffice Impress"  'pp' 'none'   libreoffice --impress ;;
        (ss)
        focus title "LibreOffice Calc"  'ss' 'none'  libreoffice --calc ;;
        (ww)
        focus title "LibreOffice Writer"  'ww' 'none'   libreoffice --writer ;;

        (fp)
        focus class ffplay 'fp' ;;
        (mp)
        focus class mpv 'mp' ;;
        (vp)
        focus instance vlc 'vp' ${lmon} /snap/bin/vlc ;;
        (hb)
        focus instance handbrake 'hb' ${cmon} "handbrake-cpulimit" ;;
        (os)
        focus instance openshot 'os'  ${cmon} openshot ;;

        (vb)
        focus title 'Oracle VM VirtualBox' 'vb' ${cmon} virtualbox ;;

        (sg)
        xfce4-screenshooter -d 2 ;;
        (wc)
        cheese ;;

        # Dropdown terminal.
        (dd)
        i3dd ;;
        # Move focus to another output.
        (op)
        i3op ;;

        ([a-z][a-z])
        # Create the eponymous workspace and launch a terminal there
        # if neither exists, otherwise visit the workspace.
        i3lowerlower "$1" ;;

        ([0][0-9][0-9])
        # Swap this container with the matching marked container.
        # On the numpad, behave as if the prompt as a double-tap.
        arg="${1:1:2}"
        i3-msg "swap container with mark ${arg}" ;;

        ([0-9][0-9])
        # Visit a numeric (two digit) mark. See the swap command
        # above.
        arg="${1:0:2}"
        i3-msg "[con_mark=\"${arg}\"] focus" ;;

        (:undo:)
        emacsclient.emacs24 -e "(with-current-buffer \"AutoVoice\" (undo))"
        echo "$1" ;;
        (:reject:)
        emacsclient.emacs24 -e "(with-current-buffer \"AutoVoice\" (previous-line)(kill-line))"
        echo "$1" ;;

        ([A-Z]*)
        # Distinguish a sentence by the uppercase first letter.
        # Insert into both clipboards and then paste into Emacs.
        echo "${*}" | xclip -selection primary     # mouse button 2
        echo "${*}" | xclip -selection clipboard   # emacs control y
        emacsclient.emacs24 -e "(with-current-buffer \"AutoVoice\" (yank))"
        echo "$*" ;;

        # Security relies on using ssh to access ${dir}/${file}.
        # Using this default is deprecated!
        (:*)
        (eval "${1/:/} ${*:2}") & ;;
    esac
}

#
# Entry point for invoking a command alias supplied either directly
# via command line or indirectly via the file watcher.
#
start ()
{
    i3programs "$@"
}

#
# When the file held in shared memory [ ${dir}/${file} ] changes, the
# file contents are passed into the i3wrapper as a command.  The
# typical command consists of a two or three character string but
# longer commands with argument lists are accepted; the former are
# called "command aliases" and the latter are assumed to be i3-msg
# commands.
#
# Don't call this directly. Called from i3filewatcher.
#
i3command ()
{
    cmd=$(cat "${dir}/${file}")
    start "${cmd}"
}

#
# File watcher.
#
# Create a file in shared memory, monitor it for changes, and when it
# changes, call i3wrapper with the file contents passed as argument.
#
i3filewatcher ()
{
    mkdir -p "${dir}"
    echo "--" | tee "${dir}/${file}"  # no-op
    exe=$(basename  "$0")
    xfce4-terminal -T "${exe}: file watcher" -x \
        inotify-hookable \
        --watch-files "${dir}/${file}" \
        --on-modify-command "$0 -s" &
    sleep 1 && i3um  # Assign a unique mark.
}

#
# When a matching Emacs frame gains/loses focus turn on/off (Dell)
# keyboard LED 3 and disable/enable the mouse.
#
# - The workspace and the window must match to disable the mouse.
# - The standard matching workspaces are m0, m1, ... m8, m9.
# - The workspace may be renamed to disallow disabling the mouse.
#
i3focuswatcher ()
{
    # This was added in i3 4.16, replacing 3 functions.
    i3-msg -t subscribe  -m '[ "window" ]' | while read line
    do
        ws=$(i3-msg -t get_workspaces | jq '.[] | .name,.focused' | grep -B1 true | grep -v true)
        case "$ws" in
            (\"m[0-9]\")
            if [ "$(echo "${line}" | grep -c -i 'emacs' )" -gt 0 ]; then
                xset led 3 # ON
                eval "$(dirname "$0")/i3-mouse" disable
            else
                xset -led 3 # OFF
                eval "$(dirname "$0")/i3-mouse" enable
            fi
            ;;
            (*)
            xset -led 3 # OFF
            eval "$(dirname "$0")/i3-mouse" enable
            ;;
        esac
    done
}

#
#
#
i3kb ()
{
    i3-msg [title=\"i3 key bindings\"] kill
    xfce4-terminal -T 'i3 key bindings' -e "less /dev/shm/$USER/i3/bindings" &
}

#
#  Provide a text entry command prompt for command aliases and command
#  numbers.
#
dashp ()
{
    # Yes, dmenu has the '-m <digit>" switch, but it's easier to do this:
    i3-msg "focus output ${cmon}"
    if [ "$1" != "help" ]; then
        # This branch is intended to be taken first.  In order to
        # reduce manual keystrokes, the Return key is pressed
        # automatically after three or four seconds.
        ( sleep $commandtimeout && \
              pgrep -c -f "dmenu -b -fn pango:DejaVu Sans 11 -p Command:" && \
              xdotool key Return) &
        # The menu is kept short because of the timeout. The user is
        # expected to type commands, but menu help is available.
        # You may prefer these menu items in the opposite order.
        list="cancel help"
    else
        # This branch is taken after choosing help. The menu is
        # displayed with a command list and does not timeout.
        list=$(egrep "\([a-zA-Z][a-zA-Z0-9]\)$" "$0" | sort | sed 's/[ ()]//g')
        list="cancel ${list}"
    fi
    # Numpad enters digits.
    numlockx on
    cmd=$(echo "${list}" | sed 's/\ /\n/g' | \
                 dmenu -b -fn 'pango:DejaVu Sans 11' -p 'Command: ')
    if [ "${cmd}" = "cancel" ]; then
        numlockx off
    elif [ "${cmd}" = "help" ]; then
        numlockx off
        dashp "help"
    else
        numlockx off
        echo "${cmd}" | tee "${dir}/${file}"
    fi
}

#
# Start here.
#
case ${XDG_CURRENT_DESKTOP} in
    (XFCE)
    case "$1" in
        # FIXME: This single dash option works, a double dash
        # equivalent doesn't, and I'm not sure why.
        (-s) i3command ;;
        # The command prompt writes to ${dir}/{file} instead of
        # calling i3wrapper with the command as its argument.
        (-p) dashp ;;
        # Verbosity over obscurity, not enough single letters.
        (--file-watcher) i3filewatcher ;;
        (--focus-watcher)  i3focuswatcher ;;
        (--toggle-emacs-mouse) i3tem ;;
        (--cycle-through-marks) i3ctm ;;
        (--unique-mark) i3um ;;

        (--keyboard-binding-info) i3kb ;;
        # In production, do nothing here?
        (*) start "$@" ;;
    esac
    exit 0
    ;;
    (*)
    exit 2
    ;;
esac

#
# Done.
#
